name: Deploy Fullstack App to Azure

on:
  workflow_dispatch:

env:
  APP_NAME: guardian-sphere
  BACKEND_PATH: './guardian_sphere_server'
  NODE_VERSION: '20.x'
  PYTHON_REPO: 'https://github.com/GuedaliaMahonAccount/AIGuardianSphere.git'
  PYTHON_PATH: './python_project'

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    steps:
      # 1. Checkout du code principal
      - name: Checkout GuardianSphere code
        uses: actions/checkout@v4

      # 2. Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      # 3. Installer et construire le frontend
      - name: Build frontend
        run: |
          cd guardian_sphere
          npm install
          npm run build

      # 4. Copier le build du frontend dans le backend
      - name: Move frontend build to backend
        run: |
          mv guardian_sphere/build guardian_sphere_server/public

      # 5. Installer les dépendances du backend
      - name: Install backend dependencies
        run: |
          cd ${{ env.BACKEND_PATH }}
          npm ci
          npm install

      # 6. Préparer le backend pour le déploiement
      - name: Prepare for deployment
        run: |
          cd ${{ env.BACKEND_PATH }}
          if [ -f web.config ]; then
            echo "web.config found."
          else
            echo "Error: web.config is missing!"
            exit 1
          fi
          echo "Contents of package.json:"
          cat package.json

      # 7. Cloner le dépôt Python
      - name: Clone Python project
        run: |
          git clone https://${{ secrets.PERSONAL_ACCESS_TOKEN }}@github.com/GuedaliaMahonAccount/AIGuardianSphere.git ${{ env.PYTHON_PATH }}

      # 8. Installer les dépendances Python
      - name: Install Python dependencies
        run: |
          cd ${{ env.PYTHON_PATH }}
          pip install --upgrade pip
          pip install -r requirements.txt

      # 9. Ajouter un fichier web.config pour Python si nécessaire
      - name: Create web.config for Python
        run: |
          cd ${{ env.PYTHON_PATH }}
          echo "<configuration>
          <system.webServer>
            <handlers>
              <add name=\"PythonHandler\" path=\"*\" verb=\"*\" modules=\"FastCgiModule\" scriptProcessor=\"D:\home\python310\python.exe|D:\home\site\wwwroot\GptGuardianSphereFineTuning.py\" resourceType=\"Unspecified\"/>
            </handlers>
          </system.webServer>
          </configuration>" > web.config

      # 10. Déployer le backend (Node.js) sur Azure
      - name: Deploy backend to Azure Web App
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.APP_NAME }}
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
          package: ${{ env.BACKEND_PATH }}

      # 11. Déployer le projet Python sur Azure
      - name: Deploy Python project to Azure Web App
        uses: azure/webapps-deploy@v2
        with:
          app-name: guardian-sphere-python
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
          package: ${{ env.PYTHON_PATH }}

      # 12. Tester le déploiement du backend
      - name: Test backend deployment
        run: |
          curl -I https://guardianspheres.com/api/health || echo "Backend health check failed"

      # 13. Tester le déploiement du projet Python
      - name: Test Python project deployment
        run: |
          curl -I https://guardian-sphere-python.azurewebsites.net || echo "Python service health check failed"

      # 14. Vérification finale de l'application
      - name: Verify application
        run: |
          curl -I https://guardianspheres.com || echo "Application verification failed"